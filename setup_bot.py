#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

import os
import sys
from dotenv import load_dotenv

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    load_dotenv()
    
    required_vars = [
        'TELEGRAM_BOT_TOKEN',
        'OPENAI_API_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\n–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

def check_chroma_db():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Chroma"""
    db_path = "chroma_db_legal_bot_part1"
    if os.path.exists(db_path):
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Chroma –Ω–∞–π–¥–µ–Ω–∞")
        return True
    else:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Chroma –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è –≤: {db_path}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        return False

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        import telegram
        print("‚úÖ python-telegram-bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        import langchain
        print("‚úÖ langchain —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå langchain –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        import openai
        print("‚úÖ openai —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        import redis
        print("‚úÖ redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        import chromadb
        print("‚úÖ chromadb —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå chromadb –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    return True

def check_bot_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞"""
    required_files = [
        'bot/bot.py',
        'bot/handlers.py',
        'bot/keyboards.py',
        'bot/config.py',
        'neuralex-main/neuralex_main.py',
        'neuralex-main/cache.py',
        'neuralex-main/chains.py',
        'neuralex-main/prompts.py',
        'run_bot.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ neuralex...\n")
    
    checks = [
        check_bot_structure(),
        check_imports(),
        check_environment(),
        check_chroma_db()
    ]
    
    if all(checks):
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: python run_bot.py")
        print("\nüìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ:")
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç—å Redis —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)")
        print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ @BotFather")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        sys.exit(1)

if __name__ == "__main__":
    main()