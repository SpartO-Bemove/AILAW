#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import os
import sys
from dotenv import load_dotenv

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    load_dotenv()
    
    required_vars = {
        'TELEGRAM_BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)',
        'OPENAI_API_KEY': 'API –∫–ª—é—á OpenAI (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ platform.openai.com)'
    }
    
    optional_vars = {
        'REDIS_URL': 'URL Redis —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: redis://localhost:6379/0)',
        'LOG_LEVEL': '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: INFO)'
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value:
            missing_vars.append((var, description))
        elif value == f"your_{var.lower()}_here":
            missing_vars.append((var, f"{description} (–Ω–∞–π–¥–µ–Ω placeholder)"))
        else:
            print(f"‚úÖ {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if missing_vars:
        print("\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for var, description in missing_vars:
            print(f"   - {var}: {description}")
        print(f"\n–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for var, description in optional_vars.items():
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ö†Ô∏è  {var}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ({description})")
    
    return True

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        ('telegram', 'python-telegram-bot'),
        ('langchain', 'langchain'),
        ('langchain_openai', 'langchain-openai'),
        ('openai', 'openai'),
        ('redis', 'redis'),
        ('chromadb', 'chromadb'),
        ('fitz', 'PyMuPDF'),
        ('docx', 'python-docx'),
        ('dotenv', 'python-dotenv')
    ]
    
    missing_packages = []
    for package, pip_name in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {pip_name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_packages.append(pip_name)
            print(f"‚ùå {pip_name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if missing_packages:
        print(f"\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    return True

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        '.env',
        'bot/bot.py',
        'bot/handlers.py',
        'bot/keyboards.py',
        'bot/config.py',
        'neuralex-main/neuralex_main.py',
        'neuralex-main/cache.py',
        'neuralex-main/chains.py',
        'neuralex-main/prompts.py',
        'run_bot.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}: –Ω–∞–π–¥–µ–Ω")
        else:
            missing_files.append(file_path)
            print(f"‚ùå {file_path}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if missing_files:
        if '.env' in missing_files:
            print("\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example:")
            print("cp .env.example .env")
            print("–ó–∞—Ç–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã")
        return False
    
    return True

def check_chroma_db():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Chroma"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Chroma...")
    
    db_path = "chroma_db_legal_bot_part1"
    if os.path.exists(db_path):
        if os.listdir(db_path):
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Chroma: –Ω–∞–π–¥–µ–Ω–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
            return True
        else:
            print(f"‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Chroma: –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –ø—É—Å—Ç–∞")
            return True
    else:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Chroma: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {db_path}")
        return False

def check_redis():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    
    try:
        import redis
        redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
        client = redis.Redis.from_url(redis_url)
        client.ping()
        print(f"‚úÖ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ ({redis_url})")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Redis: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({e})")
        print("   –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

def test_bot_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from bot.config import TOKEN, OPENAI_API_KEY
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from bot.handlers import start, button_handler
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        from neuralex_main import neuralex
        print("‚úÖ Neuralex: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def main():
    print("ü§ñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ Neuralex\n")
    
    checks = [
        check_files(),
        check_imports(),
        check_environment(),
        check_chroma_db(),
        check_redis(),
        test_bot_initialization()
    ]
    
    if all(checks):
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π:")
        print("python run_bot.py")
        
        print("\nüìã –ß–µ–∫-–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:")
        print("1. ‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("2. ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("3. ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Chroma –¥–æ—Å—Ç—É–ø–Ω–∞")
        print("4. ‚úÖ –§–∞–π–ª—ã –±–æ—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ")
        print("5. ‚ö†Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ Redis —Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        sys.exit(1)

if __name__ == "__main__":
    main()