import threading
import logging
import time
import asyncio
from openai import OpenAI
from cache import RedisCache
from langchain.schema import HumanMessage, AIMessage
from chains import get_rag_chain
from prompts import SYSTEM_PROMPT, QA_PROMPT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s',
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

class neuralex:
    """
    Conversational AI –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å RAG pipeline
    """
    store = {}
    store_lock = threading.Lock()

    def __init__(self, llm, embeddings, vector_store, redis_url=None):
        self.llm = llm
        self.embeddings = embeddings
        self.vector_store = vector_store
        
        # –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.quick_answers_cache = {}
        self.last_context_cache = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Å –≤–Ω–µ—à–Ω–∏–º Redis –∫–ª–∏–µ–Ω—Ç–æ–º
        redis_client = None
        if redis_url:
            try:
                import redis
                redis_client = redis.Redis.from_url(redis_url, decode_responses=True)
                redis_client.ping()
                logger.info(f"Redis –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {redis_url}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis –∫—ç—à–∞: {e}")
                redis_client = None
        
        self.cache = RedisCache(redis_client)

    def is_simple_question(self, query):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç—ã–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        simple_keywords = [
            '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
            '—Å–∫–æ–ª—å–∫–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∫–∞–∫–æ–π —Å—Ä–æ–∫', '–∫–∞–∫–∞—è —Å—Ç–∞—Ç—å—è'
        ]
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in simple_keywords)

    def get_quick_context(self, query):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π RAG —Ü–µ–ø–æ—á–∫–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π similarity search –±–µ–∑ history-aware retriever
            docs = self.vector_store.similarity_search(
                query, 
                k=3,  # –ú–µ–Ω—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ = –±—ã—Å—Ç—Ä–µ–µ
                score_threshold=0.4
            )
            return "\n".join([doc.page_content[:500] for doc in docs])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return ""

    def get_session_history(self, session_id):
        with neuralex.store_lock:
            if session_id not in neuralex.store:
                if self.cache:
                    neuralex.store[session_id] = self.cache.get_chat_history(session_id)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è session_id: {session_id}")
                else:
                    # Fallback –±–µ–∑ Redis
                    from langchain.memory import ChatMessageHistory
                    neuralex.store[session_id] = ChatMessageHistory()
                    logger.warning(f"–°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è session_id: {session_id} (Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
            else:
                logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è session_id: {session_id}")
        return neuralex.store[session_id]

    async def conversational_async(self, query, session_id):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è conversational –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è"""
        return self.conversational(query, session_id)

    def conversational(self, query, session_id, use_fast_mode=True):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏:
        - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—ç—à
        - –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        - –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö - –ø–æ–ª–Ω—É—é RAG —Ü–µ–ø–æ—á–∫—É

        Returns:
            Tuple[str, list]: (–æ—Ç–≤–µ—Ç –ò–ò, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è)
        """
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        cached_answer = None
        if self.cache:
            try:
                cache_key = self.cache.make_cache_key(query, session_id)
                cached_answer = self.cache.get(cache_key)
                if cached_answer:
                    logger.info(f"–ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—ç—à –¥–ª—è –∫–ª—é—á–∞: {cache_key}")
                    chat_history = self.get_session_history(session_id).messages
                    return cached_answer, chat_history
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫—ç—à–µ–º: {e}")

        logger.info(f"–ü—Ä–æ–º–∞—Ö –∫—ç—à–∞. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è session_id: {session_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        is_simple = self.is_simple_question(query) if use_fast_mode else False
        
        try:
            chat_history_obj = self.get_session_history(session_id)
            messages = chat_history_obj.messages

            if is_simple and len(messages) < 4:  # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –¥–ª—è session_id: {session_id}")
                
                # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context = self.get_quick_context(query)
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
                simple_prompt = f"""
{SYSTEM_PROMPT}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–í–æ–ø—Ä–æ—Å: {query}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É:

üéØ **–ö–†–ê–¢–ö–ò–ô –û–¢–í–ï–¢:**
[–û—Å–Ω–æ–≤–Ω–∞—è —Å—É—Ç—å –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö]

üìã **–ü–û–î–†–û–ë–ù–û:**
[–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]

‚öñÔ∏è **–ü–†–ê–í–û–í–ê–Ø –ë–ê–ó–ê:**
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –∑–∞–∫–æ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ]
"""
                
                # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ LLM –±–µ–∑ RAG —Ü–µ–ø–æ—á–∫–∏
                response = self.llm.invoke([HumanMessage(content=simple_prompt)])
                answer = response.content
                
            else:  # –ü–æ–ª–Ω–∞—è RAG —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é RAG —Ü–µ–ø–æ—á–∫—É –¥–ª—è session_id: {session_id}")
                rag_chain = get_rag_chain(self.llm, self.vector_store, SYSTEM_PROMPT, QA_PROMPT)
                
                response = rag_chain.invoke(
                    {"input": query, "chat_history": messages}
                )
                answer = response['answer']

            logger.debug(f"–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è session_id: {session_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            chat_history_obj.add_user_message(query)
            chat_history_obj.add_ai_message(answer)

            # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –∫—ç—à –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.cache:
                try:
                    self.cache.set(cache_key, answer)
                    logger.debug(f"–û—Ç–≤–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–ª—é—á–∞: {cache_key}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

            processing_time = time.time() - start_time
            logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥ –¥–ª—è session_id: {session_id}")
            
            return answer, chat_history_obj.messages
            
        except Exception as openai_error:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π OpenAI
            error_str = str(openai_error).lower()
            if any(keyword in error_str for keyword in ['openai', 'api key', 'rate limit', 'quota', 'authentication']):
                logger.error(f"OpenAI API –æ—à–∏–±–∫–∞ –¥–ª—è session_id {session_id}: {openai_error}")
                # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É OpenAI –≤—ã—à–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                raise openai_error
            else:
                logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è session_id {session_id}: {openai_error}")
                raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è session_id {session_id}: {e}")
            raise
