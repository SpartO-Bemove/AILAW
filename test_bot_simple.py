#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import sys
import asyncio
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_openai_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç OpenAI API"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API –Ω–∞–ø—Ä—è–º—É—é...")
    
    try:
        from openai import OpenAI
        
        api_key = os.getenv('OPENAI_API_KEY')
        client = OpenAI(api_key=api_key)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞—é"}],
            max_tokens=10
        )
        
        answer = response.choices[0].message.content
        print(f"‚úÖ OpenAI –æ—Ç–≤–µ—Ç: {answer}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return False

async def test_neuralex_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç neuralex"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ neuralex –Ω–∞–ø—Ä—è–º—É—é...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ neuralex-main
        neuralex_path = os.path.join(os.path.dirname(__file__), 'neuralex-main')
        if neuralex_path not in sys.path:
            sys.path.append(neuralex_path)
        
        from neuralex_main import neuralex
        from langchain_openai import ChatOpenAI, OpenAIEmbeddings
        from langchain_community.vectorstores import Chroma
        
        openai_api_key = os.getenv('OPENAI_API_KEY')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        llm = ChatOpenAI(model='gpt-4o-mini', temperature=0.9, openai_api_key=openai_api_key)
        embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
        vector_store = Chroma(persist_directory="chroma_db_legal_bot_part1", embedding_function=embeddings)
        
        # –°–æ–∑–¥–∞–µ–º neuralex
        law_assistant = neuralex(llm, embeddings, vector_store, None)  # –ë–µ–∑ Redis
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
        test_question = "–ß—Ç–æ —Ç–∞–∫–æ–µ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§?"
        print(f"–ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å: {test_question}")
        
        answer, history = law_assistant.conversational(test_question, "test_user")
        
        print(f"‚úÖ Neuralex –æ—Ç–≤–µ—Ç: {answer[:200]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ neuralex: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_telegram_handlers():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram"""
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram...")
    
    try:
        from bot.handlers import initialize_components
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        success = initialize_components()
        if success:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º law_assistant
            from bot.handlers import law_assistant
            if law_assistant:
                print("‚úÖ Law assistant –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print("‚ùå Law assistant –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ë–û–¢–ê NEURALEX\n")
    
    load_dotenv()
    
    tests = [
        test_openai_direct(),
        test_neuralex_direct(),
        test_telegram_handlers()
    ]
    
    results = []
    for test in tests:
        result = await test
        results.append(result)
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã ({passed}/{total})")
        print("üéâ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!")
        
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
        print("python run_bot.py")
        
    else:
        print(f"‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ ({passed}/{total})")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")

if __name__ == "__main__":
    asyncio.run(main())