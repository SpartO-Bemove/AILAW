#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Chroma
"""

import os
from dotenv import load_dotenv

def create_chroma_db():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Chroma"""
    load_dotenv()
    
    try:
        from langchain_openai import OpenAIEmbeddings
        from langchain_chroma import Chroma
        
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key:
            print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return False
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Chroma...")
        
        # –°–æ–∑–¥–∞–µ–º embeddings
        embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        vector_store = Chroma(
            persist_directory="chroma_db_legal_bot_part1",
            embedding_function=embeddings
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        test_docs = [
            "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ - –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–æ–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞",
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è"
        ]
        
        vector_store.add_texts(test_docs)
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Chroma —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_docs)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    create_chroma_db()