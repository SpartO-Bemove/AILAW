"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .admin_panel import AdminPanel

logger = logging.getLogger(__name__)

class AdminHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, redis_client=None):
        self.admin_panel = AdminPanel(redis_client)
    
    async def handle_admin_callback(self, query, user_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        
        if not self.admin_panel.is_admin(user_id):
            await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        data = query.data
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == 'admin_main':
            await query.edit_message_text(
                "üîß **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_admin_menu()
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        elif data == 'admin_stats':
            await query.edit_message_text(
                "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_stats_menu()
            )
        
        elif data == 'admin_stats_today':
            await self._show_stats(query, 'today')
        
        elif data == 'admin_stats_week':
            await self._show_stats(query, 'week')
        
        elif data == 'admin_stats_month':
            await self._show_stats(query, 'month')
        
        elif data == 'admin_stats_total':
            await self._show_stats(query, 'total')
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        elif data == 'admin_users':
            await query.edit_message_text(
                "üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_users_menu()
            )
        
        elif data == 'admin_users_active':
            await self._show_active_users(query)
        
        elif data == 'admin_users_stats':
            await self._show_users_stats(query)
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        elif data == 'admin_documents':
            await query.edit_message_text(
                "üìÑ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_documents_menu()
            )
        
        elif data == 'admin_docs_status':
            await self._show_documents_status(query)
        
        elif data == 'admin_docs_reload':
            await self._reload_documents(query)
        
        elif data == 'admin_docs_upload':
            await self._show_upload_instructions(query)
        
        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        elif data == 'admin_feedback':
            await self._show_feedback_summary(query)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        elif data == 'admin_settings':
            await self._show_bot_settings(query)
        
        # –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        elif data == 'admin_maintenance':
            await self._show_maintenance_menu(query)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        elif data == 'admin_monitoring':
            await self._show_monitoring_info(query)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        elif data == 'admin_detailed_stats':
            await self._show_detailed_analytics(query)
        
        # –¢–æ–∫–µ–Ω—ã –ò–ò
        elif data == 'admin_tokens':
            await self._show_token_stats(query)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
        elif data == 'admin_close':
            await query.edit_message_text(
                "‚úÖ **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞**\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin"
            )
        
        else:
            await query.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    
    async def _show_stats(self, query, period: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            await query.answer("üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            
            stats = await self.admin_panel.get_system_stats()
            period_name = {
                'today': '—Å–µ–≥–æ–¥–Ω—è',
                'week': '–Ω–µ–¥–µ–ª—é', 
                'month': '–º–µ—Å—è—Ü',
                'total': '–≤—Å–µ –≤—Ä–µ–º—è'
            }.get(period, period)
            
            message = self.admin_panel.format_stats_message(stats, period_name)
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_stats_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=self.admin_panel.get_stats_menu()
            )
    
    async def _show_active_users(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not self.admin_panel.redis_client:
                await query.edit_message_text(
                    "‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    reply_markup=self.admin_panel.get_users_menu()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.now() - timedelta(days=1)
            today = datetime.now().strftime("%Y-%m-%d")
            
            active_keys = self.admin_panel.redis_client.keys(f"analytics:user:*:{today}*")
            unique_users = set()
            
            for key in active_keys[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                if isinstance(key, bytes):
                    key = key.decode()
                parts = key.split(':')
                if len(parts) >= 3:
                    unique_users.add(parts[2])
            
            message = f"üë• **–ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò**\n\n"
            message += f"üìÖ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:** {len(unique_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            
            if unique_users:
                message += "üî• **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:**\n"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                for i, user_id in enumerate(list(unique_users)[:10], 1):
                    user_stats = self.admin_panel.analytics.get_user_stats(user_id) if self.admin_panel.analytics else {}
                    total_actions = user_stats.get('total_actions', 0)
                    message += f"{i}. ID: `{user_id}` | –î–µ–π—Å—Ç–≤–∏–π: {total_actions}\n"
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_users_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=self.admin_panel.get_users_menu()
            )
    
    async def _show_users_stats(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            if not self.admin_panel.redis_client:
                await query.edit_message_text(
                    "‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    reply_markup=self.admin_panel.get_users_menu()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_keys = self.admin_panel.redis_client.keys("user_stats:*")
            total_users = len(user_keys)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            active_today = 0
            active_week = 0
            total_questions = 0
            total_documents = 0
            
            today = datetime.now().strftime("%Y-%m-%d")
            week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
            
            for key in user_keys[:100]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                try:
                    if isinstance(key, bytes):
                        key = key.decode()
                    
                    user_id = key.split(':')[1]
                    user_stats = self.admin_panel.analytics.get_user_stats(user_id) if self.admin_panel.analytics else {}
                    
                    total_questions += user_stats.get('ask_question', 0)
                    total_documents += user_stats.get('check_document', 0)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                    if self.admin_panel.redis_client.exists(f"analytics:user:{user_id}:{today}*"):
                        active_today += 1
                    
                except Exception:
                    continue
            
            message = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
            message += f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}\n"
            message += f"üî• **–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è:** {active_today}\n"
            message += f"üìÖ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:** {active_week}\n\n"
            message += f"‚ùì **–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {total_questions}\n"
            message += f"üìÑ **–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {total_documents}\n\n"
            
            if total_users > 0:
                avg_questions = total_questions / total_users
                avg_documents = total_documents / total_users
                message += f"üìà **–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n"
                message += f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: {avg_questions:.1f}\n"
                message += f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {avg_documents:.1f}\n"
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_users_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=self.admin_panel.get_users_menu()
            )
    
    async def _show_documents_status(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from .handlers import law_assistant
            
            if not law_assistant:
                await query.edit_message_text(
                    "‚ùå Law assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    reply_markup=self.admin_panel.get_documents_menu()
                )
                return
            
            docs_info = law_assistant.get_documents_info()
            stats = docs_info.get('stats', {})
            
            message = "üìö **–°–¢–ê–¢–£–° –î–û–ö–£–ú–ï–ù–¢–û–í**\n\n"
            
            if docs_info['additional_documents_loaded']:
                message += f"‚úÖ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** –ó–∞–≥—Ä—É–∂–µ–Ω—ã\n"
                message += f"üìä **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {stats.get('total_files', 0)}\n\n"
                
                categories_names = {
                    'laws': '‚öñÔ∏è –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã',
                    'codes': 'üìñ –ö–æ–¥–µ–∫—Å—ã –†–§',
                    'articles': 'üìù –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏',
                    'court_practice': 'üèõÔ∏è –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'
                }
                
                message += "üìã **–ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:**\n"
                for category, count in stats.get('categories', {}).items():
                    name = categories_names.get(category, category)
                    message += f"{name}: **{count}** —Ñ–∞–π–ª–æ–≤\n"
                
            else:
                message += "üìù **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** –ù–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                message += "üí° –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É `documents/`\n"
            
            if docs_info['base_vector_store_available']:
                message += "\n‚úÖ **–ë–∞–∑–æ–≤–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞:** –î–æ—Å—Ç—É–ø–Ω–∞"
            else:
                message += "\n‚ùå **–ë–∞–∑–æ–≤–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞:** –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_documents_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                reply_markup=self.admin_panel.get_documents_menu()
            )
    
    async def _reload_documents(self, query):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        try:
            await query.answer("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
            
            from .handlers import law_assistant
            
            if not law_assistant or not hasattr(law_assistant, 'reload_documents'):
                await query.edit_message_text(
                    "‚ùå –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    reply_markup=self.admin_panel.get_documents_menu()
                )
                return
            
            success = law_assistant.reload_documents()
            
            if success:
                docs_info = law_assistant.get_documents_info()
                stats = docs_info.get('stats', {})
                
                message = "‚úÖ **–î–û–ö–£–ú–ï–ù–¢–´ –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ï–ù–´**\n\n"
                message += f"üìä **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {stats.get('total_files', 0)}\n\n"
                
                categories_names = {
                    'laws': '‚öñÔ∏è –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã',
                    'codes': 'üìñ –ö–æ–¥–µ–∫—Å—ã –†–§',
                    'articles': 'üìù –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏',
                    'court_practice': 'üèõÔ∏è –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'
                }
                
                for category, count in stats.get('categories', {}).items():
                    if count > 0:
                        name = categories_names.get(category, category)
                        message += f"{name}: **{count}** —Ñ–∞–π–ª–æ–≤\n"
            else:
                message = "‚ùå **–û–®–ò–ë–ö–ê –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò**\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_documents_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                reply_markup=self.admin_panel.get_documents_menu()
            )
    
    async def _show_upload_instructions(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        message = """
üì§ **–ó–ê–ì–†–£–ó–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í**

üîß **–°–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏:**

**1. –ß–µ—Ä–µ–∑ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:**
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–∏ `documents/`
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å"

**2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ `.txt` - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ `.pdf` - PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã  
‚Ä¢ `.docx` - Word –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ `.md` - Markdown —Ñ–∞–π–ª—ã

**3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:**
‚Ä¢ `documents/laws/` - –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã
‚Ä¢ `documents/codes/` - –ö–æ–¥–µ–∫—Å—ã –†–§
‚Ä¢ `documents/articles/` - –°—Ç–∞—Ç—å–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ `documents/court_practice/` - –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞

**4. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë
‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8
‚Ä¢ –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞

üöß **–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**
        """
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=self.admin_panel.get_documents_menu()
        )
    
    async def _show_feedback_summary(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            await query.answer("üí¨ –ó–∞–≥—Ä—É–∂–∞—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å...")
            
            feedback = await self.admin_panel.get_feedback_summary()
            message = self.admin_panel.format_feedback_message(feedback)
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_admin_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
                reply_markup=self.admin_panel.get_admin_menu()
            )
    
    async def _show_bot_settings(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        message = """
‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê**

üîß **–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ Rate limit: 15 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, TXT
‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: Redis
‚Ä¢ –ú–æ–¥–µ–ª—å –ò–ò: GPT-4o-mini

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –∞–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0.0
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è

üöß **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**
        """
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=self.admin_panel.get_admin_menu()
        )
    
    async def _show_maintenance_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        message = """
üîÑ **–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï**

üõ†Ô∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Redis
‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫

‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω
‚Ä¢ OpenAI API: –∞–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞: –¥–æ—Å—Ç—É–ø–Ω–∞
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: —Ä–∞–±–æ—Ç–∞–µ—Ç

üöß **–§—É–Ω–∫—Ü–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**
        """
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=self.admin_panel.get_admin_menu()
        )
    
    async def _show_monitoring_info(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            stats = await self.admin_panel.get_system_stats()
            
            message = f"""
üö® **–ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´**

üîç **–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:**
‚Ä¢ Redis: {stats.get('redis_status', 'unknown')}
‚Ä¢ OpenAI API: –∞–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Telegram API: –∞–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞: –¥–æ—Å—Ç—É–ø–Ω–∞

üìä **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users_today', 0)}
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('total_actions', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats.get('average_rating', 0):.1f}/5.0
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫: {stats.get('error_rate', 0):.1f}%

‚è∞ **–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** {datetime.now().strftime('%H:%M:%S')}

üöß **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**
            """
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=self.admin_panel.get_admin_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                reply_markup=self.admin_panel.get_admin_menu()
            )
    
    async def _show_detailed_analytics(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        message = """
üìà **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê**

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:**
‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤  
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –≤–æ—Ä–æ–Ω–∫–µ

üìã **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ CSV –æ—Ç—á–µ—Ç—ã
‚Ä¢ JSON –¥–∞–º–ø—ã
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã

üöß **–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**

üí° –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å:
‚Ä¢ –î–∞—à–±–æ—Ä–¥ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –ê–ª–µ—Ä—Ç—ã –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
‚Ä¢ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=self.admin_panel.get_admin_menu()
        )
    
    async def _show_token_stats(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ò–ò"""
        try:
            await query.answer("ü§ñ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤...")
            
            if not self.admin_panel.analytics:
                await query.edit_message_text(
                    "‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    reply_markup=self.admin_panel.get_admin_menu()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
            tokens_today = self.admin_panel.analytics.get_token_stats('today')
            tokens_total = self.admin_panel.analytics.get_token_stats('total')
            cost_today = self.admin_panel.analytics.get_token_cost_stats('today')
            cost_total = self.admin_panel.analytics.get_token_cost_stats('total')
            
            message = "ü§ñ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–ö–ï–ù–û–í –ò–ò**\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            if tokens_today:
                message += "üìÖ **–°–ï–ì–û–î–ù–Ø:**\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: **{tokens_today.get('total_tokens', 0):,}**\n"
                message += f"‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: **{tokens_today.get('prompt_tokens', 0):,}**\n"
                message += f"‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: **{tokens_today.get('completion_tokens', 0):,}**\n"
                message += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò: **{tokens_today.get('requests_count', 0)}**\n"
                
                if cost_today.get('total_cost_usd', 0) > 0:
                    message += f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: **${cost_today['total_cost_usd']:.4f}**\n"
                    message += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: **${cost_today['avg_cost_per_request']:.4f}**\n"
                
                message += "\n"
            else:
                message += "üìÖ **–°–ï–ì–û–î–ù–Ø:** –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if tokens_total:
                message += "üìä **–í–°–ï–ì–û:**\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: **{tokens_total.get('total_tokens', 0):,}**\n"
                message += f"‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: **{tokens_total.get('prompt_tokens', 0):,}**\n"
                message += f"‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: **{tokens_total.get('completion_tokens', 0):,}**\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: **{tokens_total.get('requests_count', 0)}**\n"
                
                if tokens_total.get('total_tokens', 0) > 0:
                    total_cost = self.admin_panel.analytics.calculate_token_cost(
                        tokens_total.get('prompt_tokens', 0),
                        tokens_total.get('completion_tokens', 0)
                    )
                    avg_tokens_per_request = tokens_total.get('total_tokens', 0) / max(tokens_total.get('requests_count', 1), 1)
                    message += f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **${total_cost:.4f}**\n"
                    message += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤: **{avg_tokens_per_request:.0f}** –∑–∞ –∑–∞–ø—Ä–æ—Å\n"
                
                message += "\n"
            else:
                message += "üìä **–í–°–ï–ì–û:** –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö
            message += "üí∞ **–¶–ï–ù–´ OPENAI (–∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤):**\n"
            message += "‚Ä¢ GPT-4o-mini: $0.15 –≤—Ö–æ–¥ / $0.60 –≤—ã—Ö–æ–¥\n"
            message += "‚Ä¢ GPT-4o: $2.50 –≤—Ö–æ–¥ / $10.00 –≤—ã—Ö–æ–¥\n"
            message += "‚Ä¢ GPT-4: $30.00 –≤—Ö–æ–¥ / $60.00 –≤—ã—Ö–æ–¥\n\n"
            
            message += "‚ÑπÔ∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='admin_tokens')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤",
                reply_markup=self.admin_panel.get_admin_menu()
            )