import sys
import os
import logging
import asyncio
import json
from datetime import datetime
from typing import Optional

# Telegram imports
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError

# Document processing imports
try:
    import fitz  # PyMuPDF
    PYMUPDF_AVAILABLE = True
except ImportError:
    PYMUPDF_AVAILABLE = False
    logging.warning("PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - PDF —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è")

try:
    import docx
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False
    logging.warning("python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - DOCX —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è")

# Local imports
from .config import OPENAI_API_KEY, MAX_FILE_SIZE, ALLOWED_EXTENSIONS, CHROMA_DB_PATH, REDIS_URL
from .keyboards import main_menu, laws_menu, back_to_main_button, settings_menu, feedback_menu, rating_keyboard
from .analytics import BotAnalytics
from .user_manager import UserManager
from .state_manager import StateManager
from .rate_limiter import rate_limiter
from .redis_manager import RedisManager
from .admin_handlers import AdminHandlers

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
law_assistant = None
analytics = None
user_manager = None
state_manager = None
admin_handlers = None
admin_notifier = None

def initialize_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    global law_assistant, analytics, user_manager, state_manager, admin_handlers, admin_notifier
    
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
        redis_manager = RedisManager(REDIS_URL)
        redis_client = redis_manager.client
        
        if redis_client:
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics = BotAnalytics(redis_client)
        logger.info("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_manager = UserManager(redis_client)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_manager = StateManager(redis_client)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        admin_handlers = AdminHandlers(redis_client)
        logger.info("‚úÖ –ê–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º neuralex
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ neuralex-main
            neuralex_path = os.path.join(os.path.dirname(__file__), '..', 'neuralex-main')
            if neuralex_path not in sys.path:
                sys.path.append(neuralex_path)
            
            from langchain_openai import ChatOpenAI, OpenAIEmbeddings
            from langchain_community.vectorstores import Chroma
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
            if os.path.exists(CHROMA_DB_PATH):
                logger.info("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                llm = ChatOpenAI(model='gpt-4o-mini', temperature=0.9, openai_api_key=OPENAI_API_KEY)
                embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
                vector_store = Chroma(persist_directory=CHROMA_DB_PATH, embedding_function=embeddings)
                
                # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å enhanced_neuralex, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π
                try:
                    from enhanced_neuralex import EnhancedNeuralex
                    law_assistant = EnhancedNeuralex(llm, embeddings, vector_store, REDIS_URL)
                    logger.info("‚úÖ Enhanced Neuralex –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except ImportError:
                    logger.warning("Enhanced Neuralex –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
                    from neuralex_main import neuralex
                    law_assistant = neuralex(llm, embeddings, vector_store, REDIS_URL)
                    logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–π Neuralex –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
            else:
                logger.error(f"‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {CHROMA_DB_PATH}")
                law_assistant = None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ neuralex: {e}")
            law_assistant = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            from .admin_notifier import AdminNotifier
            from telegram import Bot
            bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
            admin_notifier = AdminNotifier(bot)
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
            admin_notifier = None
        
        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
initialize_components()

def extract_text_from_file(file_path: str, file_extension: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞"""
    try:
        if file_extension == '.txt':
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        
        elif file_extension == '.pdf' and PYMUPDF_AVAILABLE:
            doc = fitz.open(file_path)
            text = ""
            for page in doc:
                text += page.get_text()
            doc.close()
            return text
        
        elif file_extension in ['.docx', '.doc'] and DOCX_AVAILABLE:
            doc = docx.Document(file_path)
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            return text
        
        else:
            logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        return None

def analyze_document(document_text: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    if not law_assistant:
        return "‚ùå –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        try:
            from prompts import DOCUMENT_ANALYSIS_PROMPT
        except ImportError:
            # Fallback –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            DOCUMENT_ANALYSIS_PROMPT = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É:
            
            {document_text}
            
            –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
            """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_prompt = DOCUMENT_ANALYSIS_PROMPT.format(document_text=document_text[:3000])
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
        analysis, _ = law_assistant.conversational(analysis_prompt, "document_analysis")
        
        return analysis
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = str(user.id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if analytics:
        analytics.log_user_action(user_id, 'start')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_manager:
        user_manager.update_last_activity(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É
    if update.message.text == '/admin':
        if admin_handlers and admin_handlers.admin_panel.is_admin(user_id):
            await admin_handlers.admin_panel.handle_admin_command(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
    
    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Neuralex!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –≤–∞—à –ò–ò-—é—Ä–∏—Å—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞.

üéØ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ ‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–∞–º
‚Ä¢ üìö –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ–∫—Å–∞—Ö –†–§
‚Ä¢ ‚öñÔ∏è –ü–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∞–≤–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö

üí° **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
    """
    
    await update.message.reply_text(
        welcome_message,
        parse_mode='Markdown',
        reply_markup=main_menu()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    if admin_handlers and query.data.startswith('admin_'):
        await admin_handlers.handle_admin_callback(query, user_id)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_manager:
        user_manager.update_last_activity(user_id)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if query.data == 'ask':
        if analytics:
            analytics.log_user_action(user_id, 'ask_question')
        
        if state_manager:
            state_manager.set_user_state(user_id, 'waiting_for_question')
        
        await query.edit_message_text(
            "‚ùì **–ó–∞–¥–∞–π—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. "
            "–ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç.\n\n"
            "üí° **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?\n"
            "‚Ä¢ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞–∑–≤–æ–¥ —á–µ—Ä–µ–∑ –ó–ê–ì–°?\n"
            "‚Ä¢ –ö–∞–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ü–î–î?\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'check_document':
        if analytics:
            analytics.log_user_action(user_id, 'check_document')
        
        if state_manager:
            state_manager.set_user_state(user_id, 'waiting_for_document')
        
        await query.edit_message_text(
            "üìÑ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.\n\n"
            "üìé **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ PDF (.pdf)\n"
            "‚Ä¢ Word (.docx, .doc)\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n\n"
            "üìè **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** 20 –ú–ë\n\n"
            "‚öñÔ∏è **–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è:**\n"
            "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n"
            "‚Ä¢ –ù–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n"
            "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n"
            "‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π\n\n"
            "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'feedback':
        await query.edit_message_text(
            "üí¨ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**\n\n"
            "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
            parse_mode='Markdown',
            reply_markup=feedback_menu()
        )
    
    elif query.data == 'settings':
        await query.edit_message_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:",
            parse_mode='Markdown',
            reply_markup=settings_menu()
        )
    
    elif query.data == 'clear_history':
        if analytics:
            analytics.log_user_action(user_id, 'clear_history')
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        if law_assistant and hasattr(law_assistant, 'store'):
            if user_id in law_assistant.store:
                del law_assistant.store[user_id]
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if state_manager:
            state_manager.clear_user_state(user_id)
            state_manager.clear_last_answer(user_id)
        
        await query.edit_message_text(
            "üîÑ **–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞**\n\n"
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n"
            "–¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–µ –ø–æ–º–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã.\n\n"
            "üí° –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'documents_status':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if law_assistant and hasattr(law_assistant, 'get_documents_info'):
            docs_info = law_assistant.get_documents_info()
            
            message = "üìö **–°–¢–ê–¢–£–° –î–û–ö–£–ú–ï–ù–¢–û–í**\n\n"
            
            if docs_info['base_vector_store_available']:
                message += "‚úÖ **–ë–∞–∑–æ–≤–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞:** –î–æ—Å—Ç—É–ø–Ω–∞\n"
            else:
                message += "‚ùå **–ë–∞–∑–æ–≤–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞:** –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            
            if docs_info['additional_documents_loaded']:
                stats = docs_info.get('stats', {})
                message += f"‚úÖ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** –ó–∞–≥—Ä—É–∂–µ–Ω—ã\n"
                message += f"üìä **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {stats.get('total_files', 0)}\n\n"
                
                categories_names = {
                    'laws': '‚öñÔ∏è –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã',
                    'codes': 'üìñ –ö–æ–¥–µ–∫—Å—ã –†–§',
                    'articles': 'üìù –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏',
                    'court_practice': 'üèõÔ∏è –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'
                }
                
                message += "üìã **–ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:**\n"
                for category, count in stats.get('categories', {}).items():
                    if count > 0:
                        name = categories_names.get(category, category)
                        message += f"{name}: **{count}** —Ñ–∞–π–ª–æ–≤\n"
            else:
                message += "üìù **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** –ù–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            message += "\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É `documents/`"
        else:
            message = "‚ùå **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'back_to_main':
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if state_manager:
            state_manager.clear_user_state(user_id)
        
        await query.edit_message_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=main_menu()
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    elif query.data == 'rate_answer':
        last_answer = state_manager.get_last_answer(user_id) if state_manager else None
        
        if last_answer:
            await query.edit_message_text(
                "‚≠ê **–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞**\n\n"
                f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {last_answer['question'][:100]}...\n\n"
                "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:",
                parse_mode='Markdown',
                reply_markup=rating_keyboard()
            )
        else:
            await query.edit_message_text(
                "‚ùå **–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∞ –∑–∞—Ç–µ–º –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞.",
                parse_mode='Markdown',
                reply_markup=feedback_menu()
            )
    
    elif query.data.startswith('rate_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫
        if query.data in ['rate_1', 'rate_2', 'rate_3', 'rate_4', 'rate_5']:
            rating = int(query.data.split('_')[1])
            
            last_answer = state_manager.get_last_answer(user_id) if state_manager else None
            
            if last_answer and analytics:
                analytics.log_question_rating(user_id, last_answer['question'], rating)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–µ
                if rating <= 2 and admin_notifier:
                    user_name = query.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                    await admin_notifier.send_low_rating_alert(
                        user_id, user_name, rating, last_answer['question']
                    )
            
            await query.edit_message_text(
                f"‚≠ê **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!**\n\n"
                f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏: **{rating}/5** {'‚≠ê' * rating}\n\n"
                "–í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤.",
                parse_mode='Markdown',
                reply_markup=back_to_main_button()
            )
        
        elif query.data == 'rate_helpful':
            await query.edit_message_text(
                "üëç **–û—Ç–ª–∏—á–Ω–æ!**\n\n"
                "–†–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã.",
                parse_mode='Markdown',
                reply_markup=back_to_main_button()
            )
        
        elif query.data == 'rate_not_helpful':
            if state_manager:
                state_manager.set_user_state(user_id, 'waiting_for_feedback')
            
            await query.edit_message_text(
                "üëé **–ñ–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–∏**\n\n"
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å? –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.\n\n"
                "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
                parse_mode='Markdown',
                reply_markup=back_to_main_button()
            )
    
    elif query.data == 'report_bug':
        if state_manager:
            state_manager.set_user_state(user_id, 'waiting_for_bug_report')
        
        await query.edit_message_text(
            "üêõ **–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å:\n\n"
            "üí° **–£–∫–∞–∂–∏—Ç–µ:**\n"
            "‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏\n"
            "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ\n"
            "‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–ª–∏ —É–≤–∏–¥–µ—Ç—å\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'suggest_improvement':
        if state_manager:
            state_manager.set_user_state(user_id, 'waiting_for_suggestion')
        
        await query.edit_message_text(
            "üí° **–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ**\n\n"
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–¥–µ—è–º–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ:\n\n"
            "üéØ **–ù–∞–ø—Ä–∏–º–µ—Ä:**\n"
            "‚Ä¢ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    elif query.data == 'settings_stats':
        if analytics:
            user_stats = analytics.get_user_stats(user_id)
            token_stats = analytics.get_user_token_stats(user_id)
            
            message = f"üìä **–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
            message += f"‚ùì **–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {user_stats.get('ask_question', 0)}\n"
            message += f"üìÑ **–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {user_stats.get('check_document', 0)}\n"
            message += f"‚≠ê **–û—Ü–µ–Ω–æ–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:** {user_stats.get('rate_answer', 0)}\n"
            message += f"üîÑ **–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π:** {user_stats.get('total_actions', 0)}\n\n"
            
            if token_stats:
                message += f"ü§ñ **–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ò–ò:**\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {token_stats.get('total_tokens', 0):,}\n"
                message += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò: {token_stats.get('requests_count', 0)}\n"
                
                if token_stats.get('total_tokens', 0) > 0:
                    cost = analytics.calculate_token_cost(
                        token_stats.get('prompt_tokens', 0),
                        token_stats.get('completion_tokens', 0)
                    )
                    message += f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.4f}\n"
        else:
            message = "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=settings_menu()
        )
    
    elif query.data == 'export_history':
        if user_manager:
            history_json = user_manager.export_user_history(user_id)
            
            if history_json:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import tempfile
                with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
                    f.write(history_json)
                    temp_file = f.name
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    with open(temp_file, 'rb') as f:
                        await context.bot.send_document(
                            chat_id=query.message.chat_id,
                            document=f,
                            filename=f"neuralex_history_{user_id}_{datetime.now().strftime('%Y%m%d')}.json",
                            caption="üìù **–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤**\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –±–æ—Ç–æ–º."
                        )
                    
                    await query.edit_message_text(
                        "‚úÖ **–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞**\n\n"
                        "–§–∞–π–ª —Å –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.",
                        parse_mode='Markdown',
                        reply_markup=settings_menu()
                    )
                finally:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(temp_file)
            else:
                await query.edit_message_text(
                    "‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.",
                    parse_mode='Markdown',
                    reply_markup=settings_menu()
                )
        else:
            await query.edit_message_text(
                "‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=settings_menu()
            )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = state_manager.get_user_state(user_id) if state_manager else None
    
    if current_state != 'waiting_for_document':
        await update.message.reply_text(
            "‚ùå –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=main_menu()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not rate_limiter.is_allowed(user_id):
        remaining_time = rate_limiter.get_reset_time(user_id)
        await update.message.reply_text(
            f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.",
            reply_markup=back_to_main_button()
        )
        return
    
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π**\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)} –ú–ë\n"
            f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {document.file_size // (1024*1024)} –ú–ë\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_extension = os.path.splitext(document.file_name)[1].lower()
    if file_extension not in ALLOWED_EXTENSIONS:
        await update.message.reply_text(
            f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞**\n\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(ALLOWED_EXTENSIONS)}\n"
            f"–í–∞—à —Ñ–∞–π–ª: {file_extension}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ –æ–¥–∏–Ω –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await update.message.reply_text(
        "‚è≥ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...**\n\n"
        "üìÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª\n"
        "üîç –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç\n"
        "‚öñÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
        parse_mode='Markdown'
    )
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        with tempfile.NamedTemporaryFile(suffix=file_extension, delete=False) as temp_file:
            await file.download_to_drive(temp_file.name)
            temp_file_path = temp_file.name
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            document_text = extract_text_from_file(temp_file_path, file_extension)
            
            if not document_text or len(document_text.strip()) < 50:
                await processing_message.edit_text(
                    "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç**\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
                    "‚Ä¢ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                    "‚Ä¢ –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
                    parse_mode='Markdown',
                    reply_markup=back_to_main_button()
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_message.edit_text(
                "üîç **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...**\n\n"
                f"üìÑ –§–∞–π–ª: {document.file_name}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {len(document_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É...",
                parse_mode='Markdown'
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            analysis_result = analyze_document(document_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if analytics:
                analytics.log_user_action(user_id, 'check_document', {
                    'filename': document.file_name,
                    'file_size': document.file_size,
                    'file_extension': file_extension
                })
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if state_manager:
                state_manager.clear_user_state(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_message.edit_text(
                f"üìã **–ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê –ó–ê–í–ï–†–®–ï–ù**\n\n"
                f"üìÑ **–§–∞–π–ª:** {document.file_name}\n"
                f"üìä **–†–∞–∑–º–µ—Ä:** {document.file_size // 1024} –ö–ë\n\n"
                f"{analysis_result}",
                parse_mode='Markdown',
                reply_markup=back_to_main_button()
            )
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_file_path)
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {delete_error}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        
        try:
            await processing_message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.",
                parse_mode='Markdown',
                reply_markup=back_to_main_button()
            )
        except Exception as edit_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_to_main_button()
            )

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    message_text = update.message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_manager:
        user_manager.update_last_activity(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = state_manager.get_user_state(user_id) if state_manager else None
    
    if current_state == 'waiting_for_question':
        await process_legal_question(update, context, message_text, user_id)
    elif current_state == 'waiting_for_bug_report':
        await process_bug_report(update, context, message_text, user_id)
    elif current_state == 'waiting_for_suggestion':
        await process_improvement_suggestion(update, context, message_text, user_id)
    elif current_state == 'waiting_for_feedback':
        await process_feedback(update, context, message_text, user_id)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text(
            "ü§î **–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            "‚Ä¢ ‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ üìÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode='Markdown',
            reply_markup=main_menu()
        )

async def process_legal_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question: str, user_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not rate_limiter.is_allowed(user_id):
        remaining_time = rate_limiter.get_reset_time(user_id)
        await update.message.reply_text(
            f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.",
            reply_markup=back_to_main_button()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
    if len(question.strip()) < 10:
        await update.message.reply_text(
            "‚ùì **–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ. "
            "–ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await update.message.reply_text(
        "ü§ñ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...**\n\n"
        "üîç –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–∞–≤–æ–≤–æ–π –±–∞–∑–µ\n"
        "‚öñÔ∏è –§–æ—Ä–º–∏—Ä—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ\n\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        parse_mode='Markdown'
    )
    
    try:
        if not law_assistant:
            await processing_message.edit_text(
                "‚ùå **–ò–ò-—é—Ä–∏—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ.\n\n"
                "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.",
                parse_mode='Markdown',
                reply_markup=back_to_main_button()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        answer, chat_history = law_assistant.conversational(question, user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        if state_manager:
            state_manager.save_last_answer(user_id, question, answer)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if state_manager:
            state_manager.clear_user_state(user_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if analytics:
            analytics.log_user_action(user_id, 'ask_question', {
                'question_length': len(question),
                'answer_length': len(answer)
            })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await processing_message.edit_text(
            f"‚öñÔ∏è **–Æ–†–ò–î–ò–ß–ï–°–ö–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø**\n\n"
            f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {question[:100]}{'...' if len(question) > 100 else ''}\n\n"
            f"{answer}\n\n"
            f"---\n"
            f"üí° *–≠—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. "
            f"–î–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —é—Ä–∏—Å—Ç—É.*",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        error_str = str(e).lower()
        if any(keyword in error_str for keyword in ['openai', 'api key', 'rate limit', 'quota']):
            error_message = (
                "‚ùå **–ü—Ä–æ–±–ª–µ–º–∞ —Å –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–º**\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å–µ—Ä–≤–∏—Å–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
        else:
            error_message = (
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
            )
        
        try:
            await processing_message.edit_text(
                error_message,
                parse_mode='Markdown',
                reply_markup=back_to_main_button()
            )
        except Exception as edit_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_to_main_button()
            )

async def process_bug_report(update: Update, context: ContextTypes.DEFAULT_TYPE, report: str, user_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
    
    if len(report.strip()) < 10:
        await update.message.reply_text(
            "üêõ **–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    if analytics:
        analytics.log_user_action(user_id, 'bug_report', {'report': report})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –∞–¥–º–∏–Ω–∞
    if analytics and analytics.redis_client:
        try:
            bug_data = {
                'user_id': user_id,
                'report': report,
                'timestamp': datetime.now().isoformat(),
                'type': 'bug_report'
            }
            key = f"feedback:bug:{user_id}:{datetime.now().timestamp()}"
            analytics.redis_client.setex(key, 7 * 24 * 3600, json.dumps(bug_data, ensure_ascii=False))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if admin_notifier:
        user_name = update.effective_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        await admin_notifier.send_bug_report(user_id, user_name, report)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if state_manager:
        state_manager.clear_user_state(user_id)
    
    await update.message.reply_text(
        "‚úÖ **–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω**\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç—á–µ—Ç! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "üìß –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
        parse_mode='Markdown',
        reply_markup=back_to_main_button()
    )

async def process_improvement_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE, suggestion: str, user_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    
    if len(suggestion.strip()) < 10:
        await update.message.reply_text(
            "üí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ. "
            "–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ –º—ã —Å–º–æ–∂–µ–º –µ–≥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if analytics:
        analytics.log_user_action(user_id, 'improvement_suggestion', {'suggestion': suggestion})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –∞–¥–º–∏–Ω–∞
    if analytics and analytics.redis_client:
        try:
            suggestion_data = {
                'user_id': user_id,
                'suggestion': suggestion,
                'timestamp': datetime.now().isoformat(),
                'type': 'improvement_suggestion'
            }
            key = f"feedback:suggestion:{user_id}:{datetime.now().timestamp()}"
            analytics.redis_client.setex(key, 7 * 24 * 3600, json.dumps(suggestion_data, ensure_ascii=False))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if admin_notifier:
        user_name = update.effective_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        await admin_notifier.send_improvement_suggestion(user_id, user_name, suggestion)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if state_manager:
        state_manager.clear_user_state(user_id)
    
    await update.message.reply_text(
        "‚úÖ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ**\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n\n"
        "üöÄ –õ—É—á—à–∏–µ –∏–¥–µ–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!",
        parse_mode='Markdown',
        reply_markup=back_to_main_button()
    )

async def process_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE, feedback: str, user_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
    
    if len(feedback.strip()) < 5:
        await update.message.reply_text(
            "üí¨ **–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    if analytics:
        analytics.log_user_action(user_id, 'feedback', {'feedback': feedback})
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if state_manager:
        state_manager.clear_user_state(user_id)
    
    await update.message.reply_text(
        "‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!**\n\n"
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n\n"
        "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!",
        parse_mode='Markdown',
        reply_markup=back_to_main_button()
    )