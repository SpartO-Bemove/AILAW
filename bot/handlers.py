import sys
import os
import logging
import json
import tempfile
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ neuralex-main
neuralex_path = os.path.join(os.path.dirname(__file__), '..', 'neuralex-main')
if neuralex_path not in sys.path:
    sys.path.append(neuralex_path)

from telegram import Update
from telegram import Document, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from .keyboards import main_menu, laws_menu, back_to_main_button, settings_menu, feedback_menu, rating_keyboard
from .analytics import BotAnalytics
from .user_manager import UserManager
from .rate_limiter import rate_limiter
from .redis_manager import RedisManager
from .state_manager import StateManager
from .admin_notifier import AdminNotifier
from .admin_handlers import AdminHandlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è handlers
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
law_assistant = None
analytics = None
user_manager = None
redis_manager = None
state_manager = None
admin_notifier = None
admin_handlers = None

def initialize_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    global law_assistant, analytics, user_manager, redis_manager, state_manager, admin_notifier, admin_handlers
    
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞...")
        
        from dotenv import load_dotenv
        load_dotenv()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
        print(f"üî¥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: {redis_url}")
        redis_manager = RedisManager(redis_url)
        redis_client = redis_manager.client
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_manager = StateManager(redis_client)
        print("‚úÖ StateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ —Å bot instance)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        analytics = BotAnalytics(redis_client)
        user_manager = UserManager(redis_client)
        print("‚úÖ Analytics –∏ UserManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        admin_handlers = AdminHandlers(redis_client)
        print("‚úÖ AdminHandlers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è neuralex –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        from neuralex_main.enhanced_neuralex import EnhancedNeuralex
        from langchain_openai import ChatOpenAI, OpenAIEmbeddings
        from langchain_community.vectorstores import Chroma
        import fitz  # PyMuPDF –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
        import docx  # python-docx –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Word
        
        llm = ChatOpenAI(model='gpt-4o-mini', temperature=0.9, openai_api_key=openai_api_key)
        print("‚úÖ LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
        print("‚úÖ Embeddings –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        vector_store = Chroma(persist_directory="chroma_db_legal_bot_part1", embedding_function=embeddings)
        print("‚úÖ Vector store –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä enhanced neuralex —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        law_assistant = EnhancedNeuralex(llm, embeddings, vector_store, redis_url, "documents")
        print("‚úÖ Enhanced Neuralex –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        docs_info = law_assistant.get_documents_info()
        if docs_info['additional_documents_loaded']:
            stats = docs_info['stats']
            print(f"üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {stats['total_files']} —Ñ–∞–π–ª–æ–≤")
            for category, count in stats['categories'].items():
                if count > 0:
                    print(f"   ‚Ä¢ {category}: {count} —Ñ–∞–π–ª–æ–≤")
        else:
            print("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –±–∞–∑–∞)")
        
        logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        print("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
initialize_components()

def extract_text_from_file(file_path, file_extension):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤"""
    try:
        if file_extension.lower() == '.pdf':
            doc = fitz.open(file_path)
            text = ""
            for page in doc:
                text += page.get_text()
            doc.close()
            return text
        
        elif file_extension.lower() in ['.docx', '.doc']:
            doc = docx.Document(file_path)
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            return text
        
        elif file_extension.lower() == '.txt':
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        
        else:
            logging.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return None

async def analyze_document(document_text, user_id):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É"""
    from prompts import DOCUMENT_ANALYSIS_PROMPT
    
    if law_assistant is None:
        return "‚ùå –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (4000 —Å–∏–º–≤–æ–ª–æ–≤)
    truncated_text = document_text[:4000]
    if len(document_text) > 4000:
        truncated_text += "\n\n[–î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...]"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ prompts.py
    analysis_prompt = DOCUMENT_ANALYSIS_PROMPT.format(document_text=truncated_text)
    
    try:
        answer, _ = law_assistant.conversational(analysis_prompt, user_id)
        return answer
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global admin_notifier, admin_handlers
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º admin_notifier –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if admin_notifier is None:
        admin_notifier = AdminNotifier(context.bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /admin
    if update.message.text == '/admin':
        if admin_handlers:
            await admin_handlers.admin_panel.handle_admin_command(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
    
    user_id = str(update.effective_user.id)
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    if query.data.startswith('admin_') and admin_handlers:
        await admin_handlers.handle_admin_callback(query, user_id)
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ  
    if state_manager:
        state_manager.clear_user_state(user_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if analytics:
        analytics.log_user_action(user_id, 'start', {'user_name': user_name})
    if user_manager:
        user_manager.update_last_activity(user_id)
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!

–Ø NEURALEX ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-—é—Ä–∏—Å—Ç ü§ñ‚öñÔ∏è

üéØ –ß–¢–û –Ø –£–ú–ï–Æ:
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω—É
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∞–≤–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
‚Ä¢ –î–∞—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤

üìö –ó–ù–ê–Æ –í–°–ï –û:
–¢—Ä—É–¥–æ–≤–æ–º –ø—Ä–∞–≤–µ ‚Ä¢ –ñ–∏–ª–∏—â–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö ‚Ä¢ –°–µ–º–µ–π–Ω–æ–º –ø—Ä–∞–≤–µ
–ù–∞–ª–æ–≥–∞—Ö ‚Ä¢ –î–¢–ü –∏ —à—Ç—Ä–∞—Ñ–∞—Ö ‚Ä¢ –ü—Ä–∞–≤–∞—Ö –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π

üí° –ù–∞—á–Ω–∏—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ:
    """
    await update.message.reply_text(welcome_text, reply_markup=main_menu())

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = state_manager.get_user_state(user_id) if state_manager else None
    if current_state != 'checking_document':
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=main_menu()
        )
        return
    
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)
    if document.file_size > 20 * 1024 * 1024:
        await update.message.reply_text(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë.",
            reply_markup=back_to_main_button()
        )
        if state_manager:
            state_manager.clear_user_state(user_id)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    allowed_extensions = ['.pdf', '.docx', '.doc', '.txt']
    file_extension = os.path.splitext(document.file_name)[1].lower()
    
    if file_extension not in allowed_extensions:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, DOC, TXT",
            reply_markup=back_to_main_button()
        )
        if state_manager:
            state_manager.clear_user_state(user_id)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    analyzing_message = await update.message.reply_text(
        "üìÑ **NEURALEX –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç...**\n\n"
        "üîç –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞\n"
        "‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n"
        "üìã –ì–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
        parse_mode='Markdown'
    )
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix=file_extension, delete=False) as temp_file:
            await file.download_to_drive(temp_file.name)
            temp_file_path = temp_file.name
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
        document_text = extract_text_from_file(temp_file_path, file_extension)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file_path)
        
        if not document_text or len(document_text.strip()) < 50:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.",
                reply_markup=back_to_main_button()
            )
            if state_manager:
                state_manager.clear_user_state(user_id)
            return
        
        logging.info(f"–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {document.file_name}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        analysis_result = await analyze_document(document_text, user_id)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=analyzing_message.message_id
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = f"""üìÑ **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:** {document.file_name}

üìä **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {document.file_size / 1024:.1f} –ö–ë
üìù **–¢–∏–ø —Ñ–∞–π–ª–∞:** {file_extension.upper()}
üìè **–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:** {len(document_text)} —Å–∏–º–≤–æ–ª–æ–≤

‚öñÔ∏è **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**

{analysis_result}

‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –î–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —é—Ä–∏—Å—Ç—É."""
        
        await update.message.reply_text(
            formatted_response,
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if state_manager:
            state_manager.clear_user_state(user_id)
        
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=analyzing_message.message_id
            )
        except Exception as delete_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu()
        )
        if state_manager:
            state_manager.clear_user_state(user_id)

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    user_text = update.message.text
    
    current_state = state_manager.get_user_state(user_id) if state_manager else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_state == 'asking_question':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
        await process_legal_question(update, context, user_text, user_id)
    elif current_state == 'checking_document':
        await update.message.reply_text(
            "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, DOC, TXT\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë",
            reply_markup=back_to_main_button()
        )
    elif current_state == 'reporting_bug':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await process_bug_report(update, context, user_text, user_id)
    elif current_state == 'suggesting_improvement':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        await process_improvement_suggestion(update, context, user_text, user_id)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=main_menu()
        )

async def process_legal_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_text: str, user_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    if not rate_limiter.is_allowed(user_id):
        remaining_time = rate_limiter.get_reset_time(user_id)
        await update.message.reply_text(
            f"‚è∞ **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.\n"
            f"–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
        if state_manager:
            state_manager.clear_user_state(user_id)
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    if analytics:
        analytics.log_user_action(user_id, 'ask_question', {'question_length': len(user_text)})
    
    if law_assistant is None:
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ OpenAI API\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á\n"
            "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='Markdown',
            reply_markup=main_menu()
        )
        if state_manager:
            state_manager.clear_user_state(user_id)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    thinking_message = await update.message.reply_text(
        "ü§ñ **NEURALEX –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...**\n\n"
        "‚ö° –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–∞–∫–æ–Ω–æ–≤\n"
        "üß† –ì–æ—Ç–æ–≤–ª—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
        parse_mode='Markdown'
    )
    
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_text[:100]}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-—é—Ä–∏—Å—Ç–∞
        answer, _ = law_assistant.conversational(user_text, user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_answer = f"ü§ñ **NEURALEX | –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**\n\n{answer}\n\n"
        formatted_answer += "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —é—Ä–∏—Å—Ç—É.\n\n"
        formatted_answer += "üí° –ë—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω? –û—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ!"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        if state_manager:
            state_manager.save_last_answer(user_id, user_text, answer)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=thinking_message.message_id
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ü–µ–Ω–∫–∏
        keyboard = [
            [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data='rate_last_answer'),
             InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data='ask')],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            formatted_answer,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if state_manager:
            state_manager.clear_user_state(user_id)
        
    except Exception as openai_error:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=thinking_message.message_id
            )
        except Exception as delete_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ: {e}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI
        error_message = str(openai_error).lower()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {openai_error}")
        
        if "rate limit" in error_message or "quota" in error_message:
            await update.message.reply_text(
                "‚è∞ **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI**\n\n"
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode='Markdown',
                reply_markup=main_menu()
            )
        elif "api key" in error_message or "authentication" in error_message:
            await update.message.reply_text(
                "üîë **–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π**\n\n"
                "–ü—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º OpenAI. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown',
                reply_markup=main_menu()
            )
        elif "insufficient_quota" in error_message:
            await update.message.reply_text(
                "üí≥ **–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç OpenAI**\n\n"
                "–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ OpenAI.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://platform.openai.com/account/billing\n"
                "–ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode='Markdown',
                reply_markup=main_menu()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
                f"–î–µ—Ç–∞–ª–∏: {str(openai_error)[:100]}...\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                parse_mode='Markdown',
                reply_markup=main_menu()
            )
        
        if state_manager:
            state_manager.clear_user_state(user_id)
        
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=thinking_message.message_id
            )
        except Exception as delete_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ: {e}")
        
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu()
    elif query.data == 'check_document':
        if state_manager:
            state_manager.set_user_state(user_id, 'checking_document')
        if analytics:
            analytics.log_user_action(user_id, 'click_check_document')
        await query.edit_message_text(
            "üìÑ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.\n\n"
            "üìã **–ß—Ç–æ —è –ø—Ä–æ–≤–µ—Ä—é:**\n"
            "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n"
            "‚Ä¢ –ù–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n"
            "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n"
            "‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é\n\n"
            "üìé **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ PDF (.pdf)\n"
            "‚Ä¢ Microsoft Word (.docx, .doc)\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n\n"
            "üìè **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç\n\n"
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'laws':
        if analytics:
            analytics.log_user_action(user_id, 'click_laws')
        await query.edit_message_text(
            "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–æ–Ω–æ–≤:**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –æ–±–ª–∞—Å—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            parse_mode='Markdown',
            reply_markup=laws_menu()
        )
    
    elif query.data == 'clear_history':
        if analytics:
            analytics.log_user_action(user_id, 'clear_history')
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if law_assistant:
            try:
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ Redis
                chat_history = law_assistant.get_session_history(user_id)
                chat_history.clear()
                await query.edit_message_text(
                    "üîÑ **–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞**\n\n"
                    "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. "
                    "–¢–µ–ø–µ—Ä—å —è –Ω–µ –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã.",
                    parse_mode='Markdown',
                    reply_markup=back_to_main_button()
                )
                logging.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.",
                    reply_markup=back_to_main_button()
                )
        else:
            await query.edit_message_text(
                "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                reply_markup=back_to_main_button()
            )
    
    elif query.data.startswith('law_'):
        if analytics:
            analytics.log_user_action(user_id, 'view_law', {'law': query.data})
        law_info = get_law_info(query.data)
        await query.edit_message_text(
            law_info,
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'back_to_main':
        if state_manager:
            state_manager.clear_user_state(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await query.edit_message_text(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu()
        )
    
    elif query.data == 'settings':
        if analytics:
            analytics.log_user_action(user_id, 'click_settings')
        await show_settings(query, user_id)
    
    elif query.data == 'settings_notifications':
        if analytics:
            analytics.log_user_action(user_id, 'toggle_notifications')
        await toggle_notifications(query, user_id)
    
    elif query.data == 'settings_language':
        if analytics:
            analytics.log_user_action(user_id, 'change_language')
        await query.edit_message_text(
            "üåê **–í—ã–±–æ—Ä —è–∑—ã–∫–∞**\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'feedback':
        if analytics:
            analytics.log_user_action(user_id, 'click_feedback')
        await query.edit_message_text(
            "üí¨ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**\n\n"
            "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! –ü–æ–º–æ–≥–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞:",
            parse_mode='Markdown',
            reply_markup=feedback_menu()
        )
    
    elif query.data == 'report_bug':
        if state_manager:
            state_manager.set_user_state(user_id, 'reporting_bug')
        await query.edit_message_text(
            "üêõ **–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å:\n"
            "‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏?\n"
            "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n"
            "‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–ª–∏ —É–≤–∏–¥–µ—Ç—å?\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'suggest_improvement':
        if state_manager:
            state_manager.set_user_state(user_id, 'suggesting_improvement')
        await query.edit_message_text(
            "üí° **–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ**\n\n"
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞:\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å?\n"
            "‚Ä¢ –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞–º–µ—Ç–∏–ª–∏?\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
            parse_mode='Markdown',
            reply_markup=back_to_main_button()
        )
    
    elif query.data == 'rate_last_answer':
        last_answer = state_manager.get_last_answer(user_id) if state_manager else None
        if last_answer:
            await query.edit_message_text(
                "‚≠ê **–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞**\n\n"
                "–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–º –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç?",
                parse_mode='Markdown',
                reply_markup=rating_keyboard()
            )
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏",
                reply_markup=back_to_main_button()
            )
    
    elif query.data.startswith('rate_'):
        rating = int(query.data.split('_')[1])
        last_answer = state_manager.get_last_answer(user_id) if state_manager else None
        if last_answer and analytics:
            analytics.log_question_rating(user_id, last_answer['question'], rating)
            analytics.log_user_action(user_id, 'rate_answer', {'rating': rating})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–µ
            if admin_notifier and rating <= 2:
                user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                await admin_notifier.send_low_rating_alert(
                    user_id, user_name, rating, last_answer['question']
                )
            
            await query.edit_message_text(
                f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} {'‚≠ê' * rating}\n\n"
                f"–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=back_to_main_button()
            )
            
            # –£–¥–∞–ª—è–µ–º –æ—Ü–µ–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            if state_manager:
                state_manager.clear_last_answer(user_id)
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏",
                reply_markup=back_to_main_button()
            )
    
    elif query.data == 'settings_stats':
        await show_user_stats(query, user_id)
    
    elif query.data == 'export_history':
        await export_user_history(query, user_id)
    
    elif query.data == 'documents_status':
        await show_documents_status(query, user_id)
    
    elif query.data == 'reload_documents':
        await reload_documents(query, user_id)
    
    else:
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def get_law_info(law_code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–∫–æ–Ω–µ"""
    law_descriptions = {
        'law_constitution': """
‚öñÔ∏è **–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏**

üìÖ –ü—Ä–∏–Ω—è—Ç–∞: 12 –¥–µ–∫–∞–±—Ä—è 1993 –≥–æ–¥–∞
üìã –°—Ç–∞—Ç—É—Å: –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–æ–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
‚Ä¢ –û—Å–Ω–æ–≤—ã –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–æ—è
‚Ä¢ –ü—Ä–∞–≤–∞ –∏ —Å–≤–æ–±–æ–¥—ã —á–µ–ª–æ–≤–µ–∫–∞ –∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞
‚Ä¢ –§–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
‚Ä¢ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –†–§, –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–µ –°–æ–±—Ä–∞–Ω–∏–µ, –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ
‚Ä¢ –°—É–¥–µ–±–Ω–∞—è –≤–ª–∞—Å—Ç—å –∏ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞
‚Ä¢ –ú–µ—Å—Ç–Ω–æ–µ —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

üí° *–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –∏–º–µ–µ—Ç –≤—ã—Å—à—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É –∏ –ø—Ä—è–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≤—Å–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§.*
        """,
        
        'law_civil': """
üèõÔ∏è **–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§**

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç —Å: 1995 –≥–æ–¥–∞ (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)
üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 4 —á–∞—Å—Ç–∏

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
‚Ä¢ –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è (–ª–∏—Ü–∞, —Å–¥–µ–ª–∫–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ)
‚Ä¢ –ü—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏–µ –≤–µ—â–Ω—ã–µ –ø—Ä–∞–≤–∞
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ (–¥–æ–≥–æ–≤–æ—Ä—ã, –¥–µ–ª–∏–∫—Ç—ã)
‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
‚Ä¢ –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ
‚Ä¢ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —á–∞—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ

üí° *–†–µ–≥—É–ª–∏—Ä—É–µ—Ç –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –ª–∏—á–Ω—ã–µ –Ω–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.*
        """,
        
        'law_criminal': """
‚öîÔ∏è **–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§**

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç —Å: 1 —è–Ω–≤–∞—Ä—è 1997 –≥–æ–¥–∞
üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –û–±—â–∞—è –∏ –û—Å–æ–±–µ–Ω–Ω–∞—è —á–∞—Å—Ç–∏

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
‚Ä¢ –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç —É–≥–æ–ª–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤ –ª–∏—á–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å—Ñ–µ—Ä–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏
‚Ä¢ –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–ª–∞—Å—Ç–∏

üí° *–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –¥–µ—è–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º–∏ –∏ –∫–∞–∫–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∑–∞ –Ω–∏—Ö –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã.*
        """,
        
        'law_labor': """
üíº **–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§**

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç —Å: 1 —Ñ–µ–≤—Ä–∞–ª—è 2002 –≥–æ–¥–∞
üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 6 —á–∞—Å—Ç–µ–π, 14 —Ä–∞–∑–¥–µ–ª–æ–≤

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
‚Ä¢ –¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä
‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
‚Ä¢ –û–ø–ª–∞—Ç–∞ –∏ –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä—É–¥–∞
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏–∏ –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
‚Ä¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Ç—Ä—É–¥–∞
‚Ä¢ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã

üí° *–†–µ–≥—É–ª–∏—Ä—É–µ—Ç —Ç—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏.*
        """,
        
        'law_family': """
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§**

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç —Å: 1 –º–∞—Ä—Ç–∞ 1996 –≥–æ–¥–∞
üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 8 —Ä–∞–∑–¥–µ–ª–æ–≤

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
‚Ä¢ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –±—Ä–∞–∫–∞
‚Ä¢ –ü—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å—É–ø—Ä—É–≥–æ–≤
‚Ä¢ –ü—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –¥–µ—Ç–µ–π
‚Ä¢ –ê–ª–∏–º–µ–Ω—Ç–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ –§–æ—Ä–º—ã –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è –¥–µ—Ç–µ–π, –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–µ–∑ –ø–æ–ø–µ—á–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∫ —Å–µ–º–µ–π–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º —Å —É—á–∞—Å—Ç–∏–µ–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω

üí° *–†–µ–≥—É–ª–∏—Ä—É–µ—Ç —Å–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è: –±—Ä–∞–∫, —Ä–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –æ–ø–µ–∫–∞, —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ.*
        """,
        
        'law_tax': """
üí∞ **–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–§**

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç —Å: 1999 –≥–æ–¥–∞ (1 —á–∞—Å—Ç—å), 2001 –≥–æ–¥–∞ (2 —á–∞—Å—Ç—å)
üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 2 —á–∞—Å—Ç–∏

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
**–ß–∞—Å—Ç—å 1:** –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–≤ –∏ —Å–±–æ—Ä–æ–≤
‚Ä¢ –ù–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∏ –∏ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã
‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–µ –æ—Ä–≥–∞–Ω—ã
‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

**–ß–∞—Å—Ç—å 2:** –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–ª–æ–≥–∏
‚Ä¢ –ù–î–°, –Ω–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å, –ù–î–§–õ
‚Ä¢ –ê–∫—Ü–∏–∑—ã, –Ω–∞–ª–æ–≥ –Ω–∞ –∏–º—É—â–µ—Å—Ç–≤–æ
‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∏ –∑–µ–º–µ–ª—å–Ω—ã–π –Ω–∞–ª–æ–≥–∏

üí° *–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞–ª–æ–≥–æ–≤ –∏ —Å–±–æ—Ä–æ–≤ –≤ –†–§.*
        """,
        
        'law_housing': """
üè† **–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§**

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç —Å: 1 –º–∞—Ä—Ç–∞ 2005 –≥–æ–¥–∞
üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 8 —Ä–∞–∑–¥–µ–ª–æ–≤

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
‚Ä¢ –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∂–∏–ª–∏—â–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ –ü—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏–µ –≤–µ—â–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∂–∏–ª—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è
‚Ä¢ –ñ–∏–ª—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∂–∏–ª–∏—â–Ω—ã–π —Ñ–æ–Ω–¥
‚Ä¢ –ñ–∏–ª–∏—â–Ω—ã–µ –∏ –∂–∏–ª–∏—â–Ω–æ-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤—ã
‚Ä¢ –¢–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∂–∏–ª—å—è
‚Ä¢ –ü–ª–∞—Ç–∞ –∑–∞ –∂–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–º–∏ –¥–æ–º–∞–º–∏

üí° *–†–µ–≥—É–ª–∏—Ä—É–µ—Ç –∂–∏–ª–∏—â–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ –Ω–∞–Ω–∏–º–∞—Ç–µ–ª–µ–π –∂–∏–ª—å—è.*
        """
    }
    
    return law_descriptions.get(law_code, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º –∑–∞–∫–æ–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

async def show_settings(query, user_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_manager:
        settings = user_manager.get_user_settings(user_id)
        notifications_status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if settings.get('notifications', True) else "üîï –í—ã–∫–ª—é—á–µ–Ω—ã"
        language = settings.get('language', 'ru')
        
        settings_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {notifications_status}
üåê **–Ø–∑—ã–∫:** {language.upper()}
üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {settings.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}
‚è∞ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {settings.get('last_active', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}
        """
    else:
        settings_text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    
    await query.edit_message_text(
        settings_text,
        parse_mode='Markdown',
        reply_markup=settings_menu()
    )

async def show_user_stats(query, user_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if analytics:
        stats = analytics.get_user_stats(user_id)
        avg_rating = analytics.get_average_rating()
        
        stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

‚ùì **–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {stats.get('ask_question', 0)}
üìÑ **–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {stats.get('check_document', 0)}
üìö **–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∑–∞–∫–æ–Ω–æ–≤:** {stats.get('view_law', 0)}
üîÑ **–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π:** {stats.get('total_actions', 0)}

‚≠ê **–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –±–æ—Ç–∞:** {avg_rating:.1f}/5.0
        """
    else:
        stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    await query.edit_message_text(
        stats_text,
        parse_mode='Markdown',
        reply_markup=back_to_main_button()
    )

async def export_user_history(query, user_id: str):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_manager:
        history_json = user_manager.export_user_history(user_id)
        if history_json:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import tempfile
            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
                f.write(history_json)
                temp_path = f.name
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(temp_path, 'rb') as f:
                    await query.message.reply_document(
                        document=f,
                        filename=f"neuralex_history_{user_id}_{datetime.now().strftime('%Y%m%d')}.json",
                        caption="üìù **–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏**\n\n–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
                    )
                
                await query.edit_message_text(
                    "‚úÖ **–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞**\n\n"
                    "–§–∞–π–ª —Å –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.",
                    parse_mode='Markdown',
                    reply_markup=back_to_main_button()
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_path)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏",
                    reply_markup=back_to_main_button()
                )
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                reply_markup=back_to_main_button()
            )
    else:
        await query.edit_message_text(
            "‚ùå –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            reply_markup=back_to_main_button()
        )

async def show_documents_status(query, user_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if law_assistant:
        docs_info = law_assistant.get_documents_info()
        stats = docs_info.get('stats', {})
        
        status_text = "üìö **–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
        
        if docs_info['additional_documents_loaded']:
            status_text += f"‚úÖ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** –ó–∞–≥—Ä—É–∂–µ–Ω—ã\n"
            status_text += f"üìä **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {stats.get('total_files', 0)}\n\n"
            
            categories_names = {
                'laws': '‚öñÔ∏è –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã',
                'codes': 'üìñ –ö–æ–¥–µ–∫—Å—ã –†–§',
                'articles': 'üìù –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏', 
                'court_practice': 'üèõÔ∏è –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'
            }
            
            for category, count in stats.get('categories', {}).items():
                name = categories_names.get(category, category)
                status_text += f"{name}: **{count}** —Ñ–∞–π–ª–æ–≤\n"
            
            status_text += f"\nüìã **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            formats = stats.get('supported_formats', [])
            status_text += ", ".join(formats)
            
        else:
            status_text += "üìù **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** –ù–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            status_text += "üí° –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É `documents/` –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n\n"
            status_text += "**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:**\n"
            status_text += "‚Ä¢ `documents/laws/` - –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã\n"
            status_text += "‚Ä¢ `documents/codes/` - –ö–æ–¥–µ–∫—Å—ã –†–§\n"
            status_text += "‚Ä¢ `documents/articles/` - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏\n"
            status_text += "‚Ä¢ `documents/court_practice/` - –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"
        
        if docs_info['base_vector_store_available']:
            status_text += "\n\n‚úÖ **–ë–∞–∑–æ–≤–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞:** –î–æ—Å—Ç—É–ø–Ω–∞"
        else:
            status_text += "\n\n‚ùå **–ë–∞–∑–æ–≤–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞:** –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data='reload_documents')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            status_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text(
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            reply_markup=back_to_main_button()
        )

async def reload_documents(query, user_id: str):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
    if law_assistant and hasattr(law_assistant, 'reload_documents'):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.edit_message_text(
            "üîÑ **–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...**\n\n"
            "üìö –°–∫–∞–Ω–∏—Ä—É—é –ø–∞–ø–∫—É documents/\n"
            "üîç –ò—â—É –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n"
            "‚ö° –û–±–Ω–æ–≤–ª—è—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
            parse_mode='Markdown'
        )
        
        try:
            success = law_assistant.reload_documents()
            
            if success:
                docs_info = law_assistant.get_documents_info()
                stats = docs_info.get('stats', {})
                
                result_text = "‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!**\n\n"
                result_text += f"üìä **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {stats.get('total_files', 0)}\n\n"
                
                categories_names = {
                    'laws': '‚öñÔ∏è –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã',
                    'codes': 'üìñ –ö–æ–¥–µ–∫—Å—ã –†–§', 
                    'articles': 'üìù –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏',
                    'court_practice': 'üèõÔ∏è –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'
                }
                
                for category, count in stats.get('categories', {}).items():
                    if count > 0:
                        name = categories_names.get(category, category)
                        result_text += f"{name}: **{count}** —Ñ–∞–π–ª–æ–≤\n"
                
                if analytics:
                    analytics.log_user_action(user_id, 'reload_documents')
                
            else:
                result_text = "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
                result_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            
            await query.edit_message_text(
                result_text,
                parse_mode='Markdown',
                reply_markup=back_to_main_button()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            await query.edit_message_text(
                "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown',
                reply_markup=back_to_main_button()
            )
    else:
        await query.edit_message_text(
            "‚ùå –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            reply_markup=back_to_main_button()
        )

async def toggle_notifications(query, user_id: str):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if user_manager:
        settings = user_manager.get_user_settings(user_id)
        current_status = settings.get('notifications', True)
        new_status = not current_status
        
        settings['notifications'] = new_status
        user_manager.save_user_settings(user_id, settings)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await query.edit_message_text(
            f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}**\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
            parse_mode='Markdown',
            reply_markup=settings_menu()
        )
    else:
        await query.edit_message_text(
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            reply_markup=back_to_main_button()
        )

async def process_bug_report(update: Update, context: ContextTypes.DEFAULT_TYPE, user_text: str, user_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    if analytics:
        analytics.log_user_action(user_id, 'bug_report', {'report_length': len(user_text)})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
    if user_manager and user_manager.redis_client:
        try:
            import json
            bug_report = {
                'user_id': user_id,
                'report': user_text,
                'timestamp': datetime.now().isoformat(),
                'type': 'bug_report'
            }
            key = f"feedback:bug:{user_id}:{datetime.now().timestamp()}"
            user_manager.redis_client.setex(key, 7 * 24 * 3600, json.dumps(bug_report))  # 7 –¥–Ω–µ–π
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if admin_notifier:
                user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                await admin_notifier.send_bug_report(user_id, user_name, user_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    await update.message.reply_text(
        "‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ!**\n\n"
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏. "
        "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –±–æ—Ç–∞ –∏ —Ü–µ–Ω–∏–º –≤–∞—à—É –ø–æ–º–æ—â—å!",
        parse_mode='Markdown',
        reply_markup=main_menu()
    )
    
    if state_manager:
        state_manager.clear_user_state(user_id)
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_text[:100]}...")

async def process_improvement_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE, user_text: str, user_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    if analytics:
        analytics.log_user_action(user_id, 'improvement_suggestion', {'suggestion_length': len(user_text)})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if user_manager and user_manager.redis_client:
        try:
            import json
            suggestion = {
                'user_id': user_id,
                'suggestion': user_text,
                'timestamp': datetime.now().isoformat(),
                'type': 'improvement_suggestion'
            }
            key = f"feedback:suggestion:{user_id}:{datetime.now().timestamp()}"
            user_manager.redis_client.setex(key, 7 * 24 * 3600, json.dumps(suggestion))  # 7 –¥–Ω–µ–π
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if admin_notifier:
                user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                await admin_notifier.send_improvement_suggestion(user_id, user_name, user_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    await update.message.reply_text(
        "üí° **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!**\n\n"
        "–í–∞—à–∞ –∏–¥–µ—è –ø–æ–ª—É—á–µ–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. "
        "–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±–æ—Ç–∞!",
        parse_mode='Markdown',
        reply_markup=main_menu()
    )
    
    if state_manager:
        state_manager.clear_user_state(user_id)
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_text[:100]}...")