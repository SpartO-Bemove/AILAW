#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å ChromaDB
"""

import os
import shutil
from dotenv import load_dotenv

def fix_chromadb():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ChromaDB"""
    load_dotenv()
    
    db_path = "chroma_db_legal_bot_part1"
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å ChromaDB...")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(db_path):
        print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é –±–∞–∑—É: {db_path}")
        shutil.rmtree(db_path)
    
    try:
        from langchain_openai import OpenAIEmbeddings
        from langchain_community.vectorstores import Chroma
        
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key:
            print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return False
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Chroma...")
        
        # –°–æ–∑–¥–∞–µ–º embeddings
        embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        vector_store = Chroma(
            persist_directory=db_path,
            embedding_function=embeddings
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_docs = [
            "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ - –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–æ–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, –ø—Ä–∏–Ω—è—Ç—ã–π –≤—Å–µ–Ω–∞—Ä–æ–¥–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º 12 –¥–µ–∫–∞–±—Ä—è 1993 –≥–æ–¥–∞.",
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –ª–∏—á–Ω—ã–µ –Ω–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.",
            "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∑–∞ –∏—Ö —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏.",
            "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —Ç—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏.",
            "–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±—Ä–∞–∫, –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –±—Ä–∞–∫–∞ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –µ–≥–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º."
        ]
        
        print(f"üìö –î–æ–±–∞–≤–ª—è–µ–º {len(test_docs)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        vector_store.add_texts(test_docs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø–æ–∏—Å–∫–∞
        results = vector_store.similarity_search("–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è", k=1)
        if results:
            print("‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ChromaDB —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print(f"üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ: {db_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    success = fix_chromadb()
    if success:
        print("\nüéâ ChromaDB –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
        print("python run_bot.py")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å ChromaDB. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")